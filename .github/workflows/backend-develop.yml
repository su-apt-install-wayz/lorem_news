name: Workflow for backend - Develop

on:
  push:
    branches: [develop]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: symfony
          POSTGRES_PASSWORD: symfony
          POSTGRES_DB: lorem_news_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U symfony"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP 8.4
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          coverage: none
          extensions: pdo, pdo_pgsql, intl, ctype, json
          tools: composer:v2

      # Génère des valeurs éphémères et les exporte dans l'env du job (pas de GitHub Secrets)
      - name: Set ephemeral env values
        shell: bash
        run: |
          echo "APP_ENV=test" >> $GITHUB_ENV
          echo "APP_DEBUG=0" >> $GITHUB_ENV
          # 64 hex chars pour APP_SECRET
          APP_SECRET=$(php -r 'echo bin2hex(random_bytes(32));')
          echo "APP_SECRET=$APP_SECRET" >> $GITHUB_ENV
          # Passphrase JWT aléatoire
          JWT_PASSPHRASE=$(php -r 'echo bin2hex(random_bytes(24));')
          echo "JWT_PASSPHRASE=$JWT_PASSPHRASE" >> $GITHUB_ENV

      - name: Validate composer.json
        run: composer validate --no-check-publish

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache/files
            backend/vendor
          key: ${{ runner.os }}-php-8.4-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-8.4-composer-

      - name: Copy env file
        run: cp .env.ci .env

      - name: Install dependencies
        run: composer install --no-interaction --no-progress --prefer-dist --optimize-autoloader

      - name: Generate JWT keys
        run: |
          mkdir -p config/jwt
          openssl genrsa -aes256 -passout pass:"$JWT_PASSPHRASE" -out config/jwt/private.pem 4096
          openssl rsa -pubout -in config/jwt/private.pem -passin pass:"$JWT_PASSPHRASE" -out config/jwt/public.pem
          chmod 600 config/jwt/private.pem config/jwt/public.pem

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            if php -r 'fsockopen("postgres", 5432) ? exit(0) : exit(1);'; then
              echo "Postgres is up"; break
            fi
            echo "Waiting for Postgres... ($i/30)"
            sleep 2
          done

      - name: Create test database
        run: php bin/console doctrine:database:create --if-not-exists --env=test

      - name: Run migrations
        run: php bin/console doctrine:migrations:migrate --env=test --no-interaction

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse src --level=max

      - name: Run tests
        run: vendor/bin/phpunit --colors=always

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
